{"mappings":"AAIA,OAAO,MAAM,kCAEZ,CAAA;AAED,OAAO,MAAM;;;CAGZ,CAAC;AAEF;IACE,MAAM,6CAA6C;IACnD,aAAa,oDAAoD;IACjE,sBAAsB,6DAA6D;CACpF;AACD;IAEE,uBAAuB,4BAA4B;IAEnD,oBAAoB,yBAAyB;IAC7C,qBAAqB,0BAA0B;IAC/C,8BAA8B,mCAAmC;IAEjE,wBAAwB,6BAA6B;IAErD,YAAY,iBAAiB;CAC9B;AAED,OAAO,MAAM,mBAA0B,MAAM,QAAQ,QAAQ,CAAC,eAiB7D,CAAC;AAEF,OAAO,MAAM,+BAAgC,UAAU,QAAQ,IAAI;;;;;;;;CAYlE,CAAC;AAEF,OAAO,MAAM,gBAAuB,MAAM,YAAY,MAAM,4BAQ3D,CAAC;AAEF,OAAO,MAAM,uBAA8B,MAAM,oBAAoB,MAAM,oCAO1E,CAAC;AAEF,OAAO,MAAM,gCAAuC,MAAM,wCAMzD,CAAC;AAMF;IACE,mBAAmB,EAAE;QACnB,aAAa,EAAE,MAAM,CAAC;QACtB,cAAc,EAAE,MAAM,CAAC;QACvB,WAAW,EAAE,MAAM,CAAC;KACrB,CAAC;CACH;AACD;IACE,mBAAmB,EAAE;QACnB,aAAa,EAAE,MAAM,CAAC;QACtB,cAAc,EAAE,MAAM,CAAC;QACvB,WAAW,EAAE,MAAM,CAAC;KACrB,CAAC;IACF,aAAa,EAAE,OAAO,CAAC;IACvB,OAAO,EAAE,MAAM,CAAC;CACjB;AAED,mBAAmB,QAAQ,GAAG,UAAU,GAAG,iBAAiB,CAAC;AAE7D;IACE,QAAQ,EAAE,MAAM,CAAC;CAClB;AACD,2BAA4B,SAAQ,QAAQ;IAC1C,QAAQ,EAAE,MAAM,CAAC;IACjB,cAAc,EAAE;QAAE,IAAI,EAAE,OAAO,CAAC;QAAC,KAAK,EAAE,MAAM,CAAA;KAAE,EAAE,CAAC;CACpD;AACD,kCAAmC,SAAQ,QAAQ;IACjD,gBAAgB,EAAE,MAAM,CAAC;CAC1B;AAED;IACE,MAAM,EAAE,gBAAgB,CAAC;IACzB,OAAO,EAAE,MAAM,CAAC;CACjB;AAED,yBAA0B,SAAQ,KAAK;IAClB,OAAO,EAAE,MAAM;IAAS,SAAS,EAAE,gBAAgB;gBAAnD,OAAO,EAAE,MAAM,EAAS,SAAS,EAAE,gBAAgB;CAGvE","sources":["src/src/index.ts","src/index.ts"],"sourcesContent":[null,"// link below gives insight on how to do this\n// https://github.com/aws-amplify/amplify-js/blob/main/packages/amazon-cognito-identity-js/src/Client.js\nlet REACT_APP_COGNITO_CLIENT_ID;\nconst REACT_APP_COGNITO_URL = \"\"\nexport const configure = (clientId) => {\n    REACT_APP_COGNITO_CLIENT_ID = clientId;\n}\n\nexport const headers = {\n  \"X-Amz-User-Agent\": \"Chrome\",\n  \"Content-Type\": \"application/x-amz-json-1.1\",\n};\n\nexport enum AuthTarget {\n  SignUp = \"AWSCognitoIdentityProviderService.SignUp\",\n  ConfirmSignUp = \"AWSCognitoIdentityProviderService.ConfirmSignUp\",\n  ResendConfirmationCode = \"AWSCognitoIdentityProviderService.ResendConfirmationCode\",\n}\nexport enum CognitoException {\n  // sign up exceptions\n  UsernameExistsException = \"UsernameExistsException\",\n  // confirm sign up exceptions\n  ExpiredCodeException = \"ExpiredCodeException\",\n  CodeMismatchException = \"CodeMismatchException\",\n  TooManyFailedAttemptsException = \"TooManyFailedAttemptsException\",\n  // resend verification exceptions\n  TooManyRequestsException = \"TooManyRequestsException\",\n  // default error\n  DefaultError = \"DefaultError\",\n}\n\nexport const request = async <T>(post: () => Promise<Response>): Promise<T> => {\n  try {\n    const response = await post();\n    const data = await response.json();\n\n    if (response.ok) return data as T;\n\n    if (\"__type\" in data) {\n      throw new CognitoError(\"response-error\", data.__type);\n    }\n\n    throw new Error(\"default error\");\n  } catch (error) {\n    if (error instanceof CognitoError) throw error;\n\n    throw new CognitoError(\"aws-cognito-error\", CognitoException.DefaultError);\n  }\n};\n\nexport const generateRequestShape = (target: AuthTarget, body: Body) => {\n  return {\n    headers: {\n      ...headers,\n      \"X-Amz-Target\": target,\n    },\n    method: \"POST\",\n    body: JSON.stringify({\n      ClientId: REACT_APP_COGNITO_CLIENT_ID,\n      ...body,\n    }),\n  };\n};\n\nexport const signUp = async (email: string, password: string) => {\n  const requestInit = generateRequestShape(AuthTarget.SignUp, {\n    Password: password,\n    UserAttributes: [{ Name: \"email\", Value: email }],\n    Username: email,\n  });\n  const post = createRequestFunction(requestInit);\n  return await request<SignUpResponse>(post);\n};\n\nexport const confirmSignUp = async (email: string, confirmationCode: string) => {\n  const requestInit = generateRequestShape(AuthTarget.ConfirmSignUp, {\n    ConfirmationCode: confirmationCode,\n    Username: email,\n  });\n  const post = createRequestFunction(requestInit);\n  return await request<Record<string, string>>(post);\n};\n\nexport const resendConfirmationCode = async (email: string) => {\n  const requestInit = generateRequestShape(AuthTarget.ResendConfirmationCode, {\n    Username: email,\n  });\n  const post = createRequestFunction(requestInit);\n  return await request<ResendConfirmationResponse>(post);\n};\n\nconst createRequestFunction = (requestInit: RequestInit) => {\n  return async (): Promise<Response> => fetch(REACT_APP_COGNITO_URL, requestInit);\n};\n\nexport interface ResendConfirmationResponse {\n  CodeDeliveryDetails: {\n    AttributeName: string;\n    DeliveryMedium: string;\n    Destination: string;\n  };\n}\nexport interface SignUpResponse {\n  CodeDeliveryDetails: {\n    AttributeName: string;\n    DeliveryMedium: string;\n    Destination: string;\n  };\n  UserConfirmed: boolean;\n  UserSub: string;\n}\n\nexport type Body = BaseBody | SignUpBody | ConfirmSignUpBody;\n\nexport interface BaseBody {\n  Username: string;\n}\nexport interface SignUpBody extends BaseBody {\n  Password: string;\n  UserAttributes: { Name: \"email\"; Value: string }[];\n}\nexport interface ConfirmSignUpBody extends BaseBody {\n  ConfirmationCode: string;\n}\n\nexport interface CognitoErrorResponse {\n  __type: CognitoException;\n  message: string;\n}\n\nexport class CognitoError extends Error {\n  constructor(public message: string, public exception: CognitoException) {\n    super(message);\n  }\n}\n"],"names":[],"version":3,"file":"types.d.ts.map","sourceRoot":"../"}