{"mappings":"IAaOA,E,IAAKC,E,IAMLC,E,IAAKC,GANAF,EAAAD,MAAU,KACd,OAAG,2CADCC,EAEG,cAAG,kDAFNA,EAGY,uBAAG,2DAHfA,EAIE,aAAG,kDAELE,EAAAD,MAAgB,KAEH,wBAAvB,0BAFUC,EAIU,qBAApB,uBAJUA,EAKW,sBAArB,wBALUA,EAMoB,+BAA9B,iCANUA,EAQc,yBAAxB,2BARUA,EAUE,aAAZ,eAuIK,MAAMC,UAAqBC,MAChCC,YAAmBC,EAAwBC,GACzCC,MAAMF,G,KADWA,U,KAAwBC,W","sources":["src/index.ts"],"sourcesContent":["// link below gives insight on how to do this\n// https://github.com/aws-amplify/amplify-js/blob/main/packages/amazon-cognito-identity-js/src/Client.js\nlet REACT_APP_COGNITO_CLIENT_ID;\nconst REACT_APP_COGNITO_URL = \"\";\nexport const configure = (clientId) => {\n  REACT_APP_COGNITO_CLIENT_ID = clientId;\n};\n\nexport const headers = {\n  \"X-Amz-User-Agent\": \"Chrome\",\n  \"Content-Type\": \"application/x-amz-json-1.1\",\n};\n\nexport enum AuthTarget {\n  SignUp = \"AWSCognitoIdentityProviderService.SignUp\",\n  ConfirmSignUp = \"AWSCognitoIdentityProviderService.ConfirmSignUp\",\n  ResendConfirmationCode = \"AWSCognitoIdentityProviderService.ResendConfirmationCode\",\n  InitiateAuth = \"AWSCognitoIdentityProviderService.InitiateAuth\",\n}\nexport enum CognitoException {\n  // sign up exceptions\n  UsernameExistsException = \"UsernameExistsException\",\n  // confirm sign up exceptions\n  ExpiredCodeException = \"ExpiredCodeException\",\n  CodeMismatchException = \"CodeMismatchException\",\n  TooManyFailedAttemptsException = \"TooManyFailedAttemptsException\",\n  // resend verification exceptions\n  TooManyRequestsException = \"TooManyRequestsException\",\n  // default error\n  DefaultError = \"DefaultError\",\n}\n\nexport const request = async <T>(post: () => Promise<Response>): Promise<T> => {\n  try {\n    const response = await post();\n    const data = await response.json();\n\n    if (response.ok) return data as T;\n\n    if (typeof data === \"object\" && \"__type\" in data) {\n      const error = data as CognitoErrorResponse;\n      throw new CognitoError(\"response-error\", error.__type);\n    }\n\n    throw new Error(\"default error\");\n  } catch (error) {\n    if (error instanceof CognitoError) throw error;\n\n    throw new CognitoError(\"aws-cognito-error\", CognitoException.DefaultError);\n  }\n};\n\nexport const generateRequestShape = (target: AuthTarget, body: Body) => {\n  return {\n    headers: {\n      ...headers,\n      \"X-Amz-Target\": target,\n    },\n    method: \"POST\",\n    body: JSON.stringify({\n      ClientId: REACT_APP_COGNITO_CLIENT_ID,\n      ...body,\n    }),\n  };\n};\n\nexport const signUp = async (email: string, password: string) => {\n  const requestInit = generateRequestShape(AuthTarget.SignUp, {\n    Password: password,\n    UserAttributes: [{ Name: \"email\", Value: email }],\n    Username: email,\n  });\n  const post = createRequestFunction(requestInit);\n  return await request<SignUpResponse>(post);\n};\n\nexport const signIn = async (email: string, password: string) => {\n  const requestInit = generateRequestShape(AuthTarget.InitiateAuth, {\n    AuthFlow: \"USER_PASSWORD_AUTH\",\n    AuthParameters: {\n      USERNAME: email,\n      PASSWORD: password,\n    },\n  });\n  const post = createRequestFunction(requestInit);\n  return await request<any>(post);\n};\n\nexport const confirmSignUp = async (\n  email: string,\n  confirmationCode: string\n) => {\n  const requestInit = generateRequestShape(AuthTarget.ConfirmSignUp, {\n    ConfirmationCode: confirmationCode,\n    Username: email,\n  });\n  const post = createRequestFunction(requestInit);\n  return await request<Record<string, string>>(post);\n};\n\nexport const resendConfirmationCode = async (email: string) => {\n  const requestInit = generateRequestShape(AuthTarget.ResendConfirmationCode, {\n    Username: email,\n  });\n  const post = createRequestFunction(requestInit);\n  return await request<ResendConfirmationResponse>(post);\n};\n\nconst createRequestFunction = (requestInit: RequestInit) => {\n  return async (): Promise<Response> =>\n    fetch(REACT_APP_COGNITO_URL, requestInit);\n};\n\n/**\n * Post Responses\n **/\nexport interface ResendConfirmationResponse {\n  CodeDeliveryDetails: {\n    AttributeName: string;\n    DeliveryMedium: string;\n    Destination: string;\n  };\n}\nexport interface SignUpResponse {\n  CodeDeliveryDetails: {\n    AttributeName: string;\n    DeliveryMedium: string;\n    Destination: string;\n  };\n  UserConfirmed: boolean;\n  UserSub: string;\n}\n\n/**\n * Post Body\n **/\n\nexport type Body = BaseBody | SignUpBody | ConfirmSignUpBody | SignInBody;\nexport interface BaseBody {\n  Username: string;\n}\nexport interface SignInBody {\n  AuthFlow: string;\n  AuthParameters: {\n    USERNAME: string;\n    PASSWORD: string;\n  };\n}\nexport interface SignUpBody extends BaseBody {\n  Password: string;\n  UserAttributes: { Name: \"email\"; Value: string }[];\n}\nexport interface ConfirmSignUpBody extends BaseBody {\n  ConfirmationCode: string;\n}\n\n/**\n * Error Handling\n **/\nexport interface CognitoErrorResponse {\n  __type: CognitoException;\n  message: string;\n}\n\nexport class CognitoError extends Error {\n  constructor(public message: string, public exception: CognitoException) {\n    super(message);\n  }\n}\n"],"names":["$a43abdf604c3e0f8$export$b925888f05fd1fd","AuthTarget","$a43abdf604c3e0f8$export$5c63b62ccf18ff3a","CognitoException","$a43abdf604c3e0f8$export$36ba3035496698f9","Error","constructor","message","exception","super"],"version":3,"file":"index.js.map","sourceRoot":"../"}