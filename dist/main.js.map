{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["// link below gives insight on how to do this\n// https://github.com/aws-amplify/amplify-js/blob/main/packages/amazon-cognito-identity-js/src/Client.js\nlet REACT_APP_COGNITO_CLIENT_ID;\nconst REACT_APP_COGNITO_URL = \"\";\nexport const configure = (clientId) => {\n  REACT_APP_COGNITO_CLIENT_ID = clientId;\n};\n\nexport const headers = {\n  \"X-Amz-User-Agent\": \"Chrome\",\n  \"Content-Type\": \"application/x-amz-json-1.1\",\n};\n\nexport enum AuthTarget {\n  SignUp = \"AWSCognitoIdentityProviderService.SignUp\",\n  ConfirmSignUp = \"AWSCognitoIdentityProviderService.ConfirmSignUp\",\n  ResendConfirmationCode = \"AWSCognitoIdentityProviderService.ResendConfirmationCode\",\n  InitiateAuth = \"AWSCognitoIdentityProviderService.InitiateAuth\",\n}\nexport enum CognitoException {\n  // sign up exceptions\n  UsernameExistsException = \"UsernameExistsException\",\n  // confirm sign up exceptions\n  ExpiredCodeException = \"ExpiredCodeException\",\n  CodeMismatchException = \"CodeMismatchException\",\n  TooManyFailedAttemptsException = \"TooManyFailedAttemptsException\",\n  // resend verification exceptions\n  TooManyRequestsException = \"TooManyRequestsException\",\n  // default error\n  DefaultError = \"DefaultError\",\n}\n\nexport const request = async <T>(post: () => Promise<Response>): Promise<T> => {\n  try {\n    const response = await post();\n    const data = await response.json();\n\n    if (response.ok) return data as T;\n\n    if (\"__type\" in data) {\n      throw new CognitoError(\"response-error\", data.__type);\n    }\n\n    throw new Error(\"default error\");\n  } catch (error) {\n    if (error instanceof CognitoError) throw error;\n\n    throw new CognitoError(\"aws-cognito-error\", CognitoException.DefaultError);\n  }\n};\n\nexport const generateRequestShape = (target: AuthTarget, body: Body) => {\n  return {\n    headers: {\n      ...headers,\n      \"X-Amz-Target\": target,\n    },\n    method: \"POST\",\n    body: JSON.stringify({\n      ClientId: REACT_APP_COGNITO_CLIENT_ID,\n      ...body,\n    }),\n  };\n};\n\nexport const signUp = async (email: string, password: string) => {\n  const requestInit = generateRequestShape(AuthTarget.SignUp, {\n    Password: password,\n    UserAttributes: [{ Name: \"email\", Value: email }],\n    Username: email,\n  });\n  const post = createRequestFunction(requestInit);\n  return await request<SignUpResponse>(post);\n};\n\nexport const signIn = async (email: string, password: string) => {\n  const requestInit = generateRequestShape(AuthTarget.InitiateAuth, {\n    AuthFlow: \"USER_PASSWORD_AUTH\",\n    AuthParameters: {\n      USERNAME: email,\n      PASSWORD: password,\n    },\n  });\n  const post = createRequestFunction(requestInit);\n  return await request<any>(post);\n};\n\nexport const confirmSignUp = async (\n  email: string,\n  confirmationCode: string\n) => {\n  const requestInit = generateRequestShape(AuthTarget.ConfirmSignUp, {\n    ConfirmationCode: confirmationCode,\n    Username: email,\n  });\n  const post = createRequestFunction(requestInit);\n  return await request<Record<string, string>>(post);\n};\n\nexport const resendConfirmationCode = async (email: string) => {\n  const requestInit = generateRequestShape(AuthTarget.ResendConfirmationCode, {\n    Username: email,\n  });\n  const post = createRequestFunction(requestInit);\n  return await request<ResendConfirmationResponse>(post);\n};\n\nconst createRequestFunction = (requestInit: RequestInit) => {\n  return async (): Promise<Response> =>\n    fetch(REACT_APP_COGNITO_URL, requestInit);\n};\n\n/**\n * Post Responses\n **/\nexport interface ResendConfirmationResponse {\n  CodeDeliveryDetails: {\n    AttributeName: string;\n    DeliveryMedium: string;\n    Destination: string;\n  };\n}\nexport interface SignUpResponse {\n  CodeDeliveryDetails: {\n    AttributeName: string;\n    DeliveryMedium: string;\n    Destination: string;\n  };\n  UserConfirmed: boolean;\n  UserSub: string;\n}\n\n/**\n * Post Body\n **/\n\nexport type Body = BaseBody | SignUpBody | ConfirmSignUpBody | SignInBody;\nexport interface BaseBody {\n  Username: string;\n}\nexport interface SignInBody {\n  AuthFlow: string;\n  AuthParameters: {\n    USERNAME: string;\n    PASSWORD: string;\n  };\n}\nexport interface SignUpBody extends BaseBody {\n  Password: string;\n  UserAttributes: { Name: \"email\"; Value: string }[];\n}\nexport interface ConfirmSignUpBody extends BaseBody {\n  ConfirmationCode: string;\n}\n\n/**\n * Error Handling\n **/\nexport interface CognitoErrorResponse {\n  __type: CognitoException;\n  message: string;\n}\n\nexport class CognitoError extends Error {\n  constructor(public message: string, public exception: CognitoException) {\n    super(message);\n  }\n}\n"],"names":[],"version":3,"file":"main.js.map"}